{"version":3,"sources":["Initializer/Firebase.js","Components/Login.js","Components/MyNotes.js","Components/NewNote.js","Components/Routes.js","App.js","serviceWorker.js","index.js"],"names":["fire","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","db","firestore","Login","props","handleChange","e","setState","target","name","value","handleSubmit","preventDefault","console","log","state","signIn","bind","signUp","resetPassword","email","password","auth","signInWithEmailAndPassword","this","then","u","catch","error","createUserWithEmailAndPassword","currentUser","sendEmailVerification","alert","sendPasswordResetEmail","className","onSubmit","onChange","type","placeholder","onClick","Component","MyNotes","deleteNote","id","collection","doc","delete","data","editNote","update","title","note","date","Date","toLocaleDateString","hour","toLocaleTimeString","notes","get","querySnapshot","docs","map","user","key","uid","event","NewNote","saveNote","add","history","push","withRouter","Routes","logOut","signOut","to","path","component","App","onAuthStateChanged","authListener","render","exact","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4561d45c.chunk.js","sourcesContent":["import firebase from 'firebase';\r\nimport 'firebase/firestore';\r\n\r\n\r\n  const config = {\r\n    apiKey: \"AIzaSyBwqyajVT3SSW0bqCLClkhJi_OyFFrEvpc\",\r\n    authDomain: \"my-notes-9bd73.firebaseapp.com\",\r\n    databaseURL: \"https://my-notes-9bd73.firebaseio.com\",\r\n    projectId: \"my-notes-9bd73\",\r\n    storageBucket: \"my-notes-9bd73.appspot.com\",\r\n    messagingSenderId: \"360180833853\",\r\n    appId: \"1:360180833853:web:eaa4c0a907099e54341454\"\r\n  };\r\n  const fire = firebase.initializeApp(config);\r\n  const db = firebase.firestore(fire);\r\n  \r\n  export default {fire,db};\r\n","import React, {Component} from 'react';\r\nimport firebase from '../Initializer/Firebase';\r\n\r\n\r\nclass Login extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.signIn = this.signIn.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.signUp = this.signUp.bind(this);\r\n    this.resetPassword = this.resetPassword.bind(this);\r\n    this.state ={\r\n      name:'',\r\n      email:'',\r\n      password: '',\r\n    }\r\n  }\r\n    handleChange=(e)=>{\r\n      this.setState({[e.target.name]:e.target.value});\r\n    }\r\n    handleSubmit=(e)=>{\r\n      e.preventDefault();\r\n      console.log(this.state);\r\n            \r\n    }\r\n    signIn(e) {\r\n      e.preventDefault();\r\n      firebase.fire.auth().signInWithEmailAndPassword(this.state.email, this.state.password).then((u)=>{\r\n        console.log(this.state.email, this.state.password, this.state.name);\r\n        \r\n      }).catch((error) => {\r\n          console.log(error);\r\n        });\r\n    }\r\n    \r\n    signUp(e){\r\n      console.log(this.state.email)\r\n      e.preventDefault();\r\n      firebase.fire.auth().createUserWithEmailAndPassword(this.state.email, this.state.password)\r\n      .then(()=>{\r\n        \r\n        firebase.fire.auth().currentUser.sendEmailVerification();\r\n      })\r\n      .catch((error) => {\r\n        alert(error, 'Error')\r\n        })\r\n    }\r\n    resetPassword(e){\r\n      e.preventDefault();\r\n      firebase.fire.auth().sendPasswordResetEmail(this.setState.email, this.setState.password = !this.setState.password).then((u) => {\r\n        alert(\"El correo de verificaciÃ³n se ha enviado\");\r\n      }).catch(() => {\r\n        alert(\"Error\");\r\n      });\r\n    }\r\n\r\n    \r\n   render(){\r\n    return (\r\n      <div className = 'login'>\r\n          <h1 className = 'titleWindowSign'>My Notes</h1>\r\n            <form onSubmit={this.handleSubmit}>\r\n              <div>\r\n                <input value={this.state.name} onChange={this.handleChange} type=\"text\" name=\"name\" className=\"form-login\" placeholder=\"Enter Name\" />\r\n              </div>\r\n              <div>\r\n                <input value={this.state.email} onChange={this.handleChange} type=\"email\" name=\"email\" className=\"form-login\" placeholder=\"Enter Email\" />\r\n              </div>\r\n              <div>\r\n                <input value={this.state.password} onChange={this.handleChange} type=\"password\" name=\"password\" className=\"form-login\" placeholder=\"Password\" />\r\n              </div>\r\n                <button className='buttonSign' type= 'submit' onClick={this.signIn}>Sign In</button>\r\n                <button className='buttonSign' type= 'submit' onClick={this.signUp}>Sign Up </button>\r\n                <button className='buttonSign' onClick={this.resetPassword}>Forgot Password</button>\r\n           </form> \r\n      </div>\r\n       );\r\n   }\r\n}\r\n\r\nexport default Login;\r\n","import React, { Component } from 'react';\r\nimport firebase from '../Initializer/Firebase';\r\n\r\n\r\nclass MyNotes extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      title: '',\r\n      note: '',\r\n      notes: []\r\n    }\r\n\r\n  }\r\n  componentDidMount() {\r\n    firebase.db.collection(\"user\").get()\r\n      .then(querySnapshot => {\r\n        const data = querySnapshot.docs.map(doc => ({ ...doc.data(), id: doc.id }));\r\n        this.setState({ notes: data })\r\n      })\r\n  }\r\n  deleteNote = (id) => {\r\n    firebase.db.collection(\"user\").doc(id).delete().then((data) => {\r\n      alert('The note has been deleted!');\r\n    })\r\n      .catch((error) => {\r\n        alert(\"The Note has not deleted\");\r\n      });\r\n  }\r\n  editNote = (id) => {\r\n    firebase.db.collection(\"user\").doc(id).update({\r\n      title: this.state.title,\r\n      note: this.state.note,\r\n      date: new Date().toLocaleDateString(),\r\n      hour: new Date().toLocaleTimeString(),\r\n    })\r\n\r\n  }\r\n\r\n  render() {\r\n    const { notes } = this.state;\r\n    return (\r\n      <div className='backgroundMyNotes'>\r\n        {notes.map(user => console.log(user) || (\r\n          <div className='note' key={user.uid}>\r\n            <div className='allNotes'>\r\n              <h6>Date: {user.date} Hour: {user.hour}</h6>\r\n              <input placeholder= {user.title} className=\"form\" onChange={(event) => (this.setState({title:event.target.value}))}/>\r\n              <textarea placeholder= {user.note} className=\"form\" onChange={(event) => (this.setState({note:event.target.value}))}/>\r\n              <div className='buttonAllNotes'>\r\n              <button className='buttonAllNotes1' type=\"button\" onClick={() => this.editNote(user.id)} key={user.uid}><i className=\"material-icons\">edit</i></button>\r\n              <button className='buttonAllNotes2' type=\"button\" onClick={() => this.deleteNote(user.id)} key={user.uid}><i className=\"material-icons\">delete</i></button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default MyNotes;\r\n","import React, { Component } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport firebase from '../Initializer/Firebase';\r\n\r\nclass NewNote extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    //this.saveNote = this.saveNote.bind(this);\r\n    this.state = {\r\n      title: '',\r\n      note: '',\r\n    }\r\n  }\r\n  handleChange(event) {\r\n    this.setState({ [event.target.name]: event.target.value });\r\n  }\r\n  \r\n  saveNote = () => {\r\n    \r\n    firebase.db.collection(\"user\").add({\r\n      title: this.state.title,\r\n      note: this.state.note,\r\n      date: new Date().toLocaleDateString(), \r\n      hour: new Date().toLocaleTimeString(),\r\n    })\r\n    this.setState({\r\n      title: \"\",\r\n      note: \"\",\r\n      date: new Date().toLocaleDateString(),\r\n      hour: new Date().toLocaleTimeString(),\r\n    })\r\n    this.props.history.push('/my-notes')\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className='backgroundNewNote'>\r\n        <form className='newNote' >\r\n          <h1 className='homeTitle'>You can write notes to never forget them</h1>\r\n          <input value={this.title} onChange={this.handleChange} type='text' name='title' className=\"form-new-note\" id='title' placeholder='Title' />\r\n          <input value={this.note} onChange={this.handleChange} type='text' name='note' className=\"form-new-note\" id='note' placeholder='What do think...?' />\r\n          <button className='buttonSaveNote' type=\"button\" onClick={this.saveNote} > Save</button>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default withRouter (NewNote);\r\n\r\n","import React, {Component} from 'react';\r\nimport {BrowserRouter as Router, Route, NavLink} from 'react-router-dom';\r\nimport firebase from 'firebase/app';\r\n\r\nimport Login from './Login';\r\nimport MyNotes from './MyNotes';\r\nimport NewNote from './NewNote';\r\n\r\nclass Routes extends Component {\r\n  logOut = ()=> {\r\n    \r\n    firebase.auth().signOut().then(() => {\r\n      alert(\"La sesiÃ³n se cerrÃ³ correctamente\");\r\n    }).catch(() => {\r\n      alert(\"error\");\r\n    });\r\n  }\r\n \r\n  render(){\r\n    return(\r\n      <div>\r\n        <Router>\r\n          <header className='nav'>\r\n            <ul className='nav-router'>\r\n              <li ><NavLink to=\"/new-note\">New note</NavLink></li>\r\n              <li ><NavLink to=\"/my-notes\">My notes</NavLink></li>\r\n              <li onClick={this.logOut}>Log Out</li>\r\n            </ul>\r\n          </header>\r\n            <Route path=\"/login\" component={Login} />\r\n            <Route path=\"/new-note\" component={NewNote} />\r\n            <Route path=\"/my-notes\" component={MyNotes} />   \r\n        </Router>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default Routes","import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\n//import fire from './Initializer/Firebase'; \r\nimport firebase from 'firebase/app';\r\nimport Login from './Components/Login';\r\n\r\nimport './Login.css';\r\nimport './App.css';\r\nimport Routes from './Components/Routes';\r\n\r\n\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      user: {},\r\n    }\r\n  }\r\n  authListener() {\r\n    firebase.auth().onAuthStateChanged((user) => {\r\n      if (user) {\r\n        this.setState({ user });\r\n      } else {\r\n        this.setState({ user: null });\r\n      }\r\n    })\r\n  }\r\n\r\n  \r\n\r\n  componentDidMount() {\r\n    this.authListener();\r\n  }\r\n  \r\n\r\n\r\n  render() {\r\n    return (\r\n      <Router>\r\n      <Route render={() => (\r\n        (this.state.user) ? (<Route exact path=\"/\" component={Routes} />) : (<Login />)\r\n      )} />\r\n    </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}